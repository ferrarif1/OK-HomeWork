{
	"compiler": {
		"version": "0.8.11+commit.d7f03943"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "previousBlockhash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"multicall(bytes32,bytes[])": {
					"details": "The `msg.value` should not be trusted for any method callable from multicall.",
					"params": {
						"data": "The encoded function data for each of the calls to make to this contract",
						"previousBlockhash": "The expected parent blockHash"
					},
					"returns": {
						"results": "The results from each of the calls passed in via data"
					}
				},
				"multicall(bytes[])": {
					"details": "The `msg.value` should not be trusted for any method callable from multicall.",
					"params": {
						"data": "The encoded function data for each of the calls to make to this contract"
					},
					"returns": {
						"results": "The results from each of the calls passed in via data"
					}
				},
				"multicall(uint256,bytes[])": {
					"details": "The `msg.value` should not be trusted for any method callable from multicall.",
					"params": {
						"data": "The encoded function data for each of the calls to make to this contract",
						"deadline": "The time by which this function must be called before failing"
					},
					"returns": {
						"results": "The results from each of the calls passed in via data"
					}
				}
			},
			"title": "MulticallExtended interface",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"multicall(bytes32,bytes[])": {
					"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
				},
				"multicall(bytes[])": {
					"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
				},
				"multicall(uint256,bytes[])": {
					"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
				}
			},
			"notice": "Enables calling multiple methods in a single call to the contract with optional validation",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@uniswap/swap-router-contracts/contracts/interfaces/IMulticallExtended.sol": "IMulticallExtended"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@uniswap/swap-router-contracts/contracts/interfaces/IMulticallExtended.sol": {
			"keccak256": "0xf92e9474990ec0025f6e4b8faf040a5c6280549c16bb42b6c00be9975757d997",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://968de2851b6a2a502e1b19c625beff9c727c855e871925cf9b4c073395b8646e",
				"dweb:/ipfs/QmTsSX6MrbhEx7dcozPk1NaNHWQkPzEDQRRwTR7MfLMBbu"
			]
		},
		"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol": {
			"keccak256": "0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016",
				"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD"
			]
		}
	},
	"version": 1
}