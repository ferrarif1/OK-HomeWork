{
	"compiler": {
		"version": "0.8.13+commit.abaa5c0e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountOutMin",
						"type": "uint256"
					},
					{
						"internalType": "address[]",
						"name": "path",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "swapExactTokensForTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountInMax",
						"type": "uint256"
					},
					{
						"internalType": "address[]",
						"name": "path",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "swapTokensForExactTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"swapExactTokensForTokens(uint256,uint256,address[],address)": {
					"details": "Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",
					"params": {
						"amountIn": "The amount of token to swap",
						"amountOutMin": "The minimum amount of output that must be received",
						"path": "The ordered list of tokens to swap through",
						"to": "The recipient address"
					},
					"returns": {
						"amountOut": "The amount of the received token"
					}
				},
				"swapTokensForExactTokens(uint256,uint256,address[],address)": {
					"params": {
						"amountInMax": "The maximum amount of input that the caller will pay",
						"amountOut": "The amount of token to swap for",
						"path": "The ordered list of tokens to swap through",
						"to": "The recipient address"
					},
					"returns": {
						"amountIn": "The amount of token to pay"
					}
				}
			},
			"title": "Router token swapping functionality",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"swapExactTokensForTokens(uint256,uint256,address[],address)": {
					"notice": "Swaps `amountIn` of one token for as much as possible of another token"
				},
				"swapTokensForExactTokens(uint256,uint256,address[],address)": {
					"notice": "Swaps as little as possible of one token for an exact amount of another token"
				}
			},
			"notice": "Functions for swapping tokens via Uniswap V2",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@uniswap/swap-router-contracts/contracts/interfaces/IV2SwapRouter.sol": "IV2SwapRouter"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@uniswap/swap-router-contracts/contracts/interfaces/IV2SwapRouter.sol": {
			"keccak256": "0xfc31c1d8d559aef138a826066ca471573d7efe497775fcbf3546f27f4e84f2eb",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://01e5a1a70e4149eb0ee216c2a455b0138b2d307f0139500e24065a5b4ab9b287",
				"dweb:/ipfs/QmX3ZvAS571F3tvKnuHTtKqh78yBoJD5GsX2fv3UbC3kdU"
			]
		}
	},
	"version": 1
}